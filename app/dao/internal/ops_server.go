// ==========================================================================
// Code generated by GoFrame CLI tool. DO NOT EDIT.
// ==========================================================================

package internal

import (
	"context"
	"github.com/gogf/gf/database/gdb"
	"github.com/gogf/gf/frame/g"
)

// OpsServerDao is the manager for logic model data accessing and custom defined data operations functions management.
type OpsServerDao struct {
	Table   string           // Table is the underlying table name of the DAO.
	Group   string           // Group is the database configuration group name of current DAO.
	Columns OpsServerColumns // Columns is the short type for Columns, which contains all the column names of Table for convenient usage.
}

// OpsServerColumns defines and stores column names for table tbl_ops_server.
type OpsServerColumns struct {
	Id           string // 服务器ID
	Name         string // 服务器名称
	Title        string // 服务器标题(别名)
	AuthCode     string // 服务器授权码(用于代理连接标识)
	InnerIpAddr  string // 内网IP地址
	OuterIpAddr  string // 外网IP地址
	Status       string // 状态(-1:删除,0:停用,1:启用)
	LastPingTime string // 最后心跳时间
	LastPingMsg  string // 最后心跳消息
	CreateTime   string // 创建时间
	UpdateTime   string // 更新时间
}

//  opsServerColumns holds the columns for table tbl_ops_server.
var opsServerColumns = OpsServerColumns{
	Id:           "id",
	Name:         "name",
	Title:        "title",
	AuthCode:     "auth_code",
	InnerIpAddr:  "inner_ip_addr",
	OuterIpAddr:  "outer_ip_addr",
	Status:       "status",
	LastPingTime: "last_ping_time",
	LastPingMsg:  "last_ping_msg",
	CreateTime:   "create_time",
	UpdateTime:   "update_time",
}

// NewOpsServerDao creates and returns a new DAO object for table data access.
func NewOpsServerDao() *OpsServerDao {
	return &OpsServerDao{
		Group:   "default",
		Table:   "tbl_ops_server",
		Columns: opsServerColumns,
	}
}

// DB retrieves and returns the underlying raw database management object of current DAO.
func (dao *OpsServerDao) DB() gdb.DB {
	return g.DB(dao.Group)
}

// Ctx creates and returns the Model for current DAO, It automatically sets the context for current operation.
func (dao *OpsServerDao) Ctx(ctx context.Context) *gdb.Model {
	return dao.DB().Model(dao.Table).Safe().Ctx(ctx)
}

// Transaction wraps the transaction logic using function f.
// It rollbacks the transaction and returns the error from function f if it returns non-nil error.
// It commits the transaction and returns nil if function f returns nil.
//
// Note that, you should not Commit or Rollback the transaction in function f
// as it is automatically handled by this function.
func (dao *OpsServerDao) Transaction(ctx context.Context, f func(ctx context.Context, tx *gdb.TX) error) (err error) {
	return dao.Ctx(ctx).Transaction(ctx, f)
}
