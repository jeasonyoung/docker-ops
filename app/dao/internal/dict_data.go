// ==========================================================================
// Code generated by GoFrame CLI tool. DO NOT EDIT.
// ==========================================================================

package internal

import (
	"context"
	"github.com/gogf/gf/database/gdb"
	"github.com/gogf/gf/frame/g"
)

// DictDataDao is the manager for logic model data accessing and custom defined data operations functions management.
type DictDataDao struct {
	Table   string          // Table is the underlying table name of the DAO.
	Group   string          // Group is the database configuration group name of current DAO.
	Columns DictDataColumns // Columns is the short type for Columns, which contains all the column names of Table for convenient usage.
}

// DictDataColumns defines and stores column names for table tbl_dict_data.
type DictDataColumns struct {
	Id         string // 字典数据ID
	Code       string // 字典代码(排序)
	Label      string // 字典标签
	Value      string // 字典键值
	IsDefault  string // 是否默认(0:否,1:是)
	Type       string // 字典类型
	CssClass   string // 样式属性
	ListClass  string // 表格回显样式
	Remark     string // 字典数据备注
	Status     string // 状态(-1:删除,0:停用,1:启用)
	CreateTime string // 创建时间
	UpdateTime string // 更新时间
}

//  dictDataColumns holds the columns for table tbl_dict_data.
var dictDataColumns = DictDataColumns{
	Id:         "id",
	Code:       "code",
	Label:      "label",
	Value:      "value",
	IsDefault:  "is_default",
	Type:       "type",
	CssClass:   "css_class",
	ListClass:  "list_class",
	Remark:     "remark",
	Status:     "status",
	CreateTime: "create_time",
	UpdateTime: "update_time",
}

// NewDictDataDao creates and returns a new DAO object for table data access.
func NewDictDataDao() *DictDataDao {
	return &DictDataDao{
		Group:   "default",
		Table:   "tbl_dict_data",
		Columns: dictDataColumns,
	}
}

// DB retrieves and returns the underlying raw database management object of current DAO.
func (dao *DictDataDao) DB() gdb.DB {
	return g.DB(dao.Group)
}

// Ctx creates and returns the Model for current DAO, It automatically sets the context for current operation.
func (dao *DictDataDao) Ctx(ctx context.Context) *gdb.Model {
	return dao.DB().Model(dao.Table).Safe().Ctx(ctx)
}

// Transaction wraps the transaction logic using function f.
// It rollbacks the transaction and returns the error from function f if it returns non-nil error.
// It commits the transaction and returns nil if function f returns nil.
//
// Note that, you should not Commit or Rollback the transaction in function f
// as it is automatically handled by this function.
func (dao *DictDataDao) Transaction(ctx context.Context, f func(ctx context.Context, tx *gdb.TX) error) (err error) {
	return dao.Ctx(ctx).Transaction(ctx, f)
}
