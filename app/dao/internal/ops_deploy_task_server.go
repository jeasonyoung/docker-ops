// ==========================================================================
// Code generated by GoFrame CLI tool. DO NOT EDIT.
// ==========================================================================

package internal

import (
	"context"
	"github.com/gogf/gf/database/gdb"
	"github.com/gogf/gf/frame/g"
)

// OpsDeployTaskServerDao is the manager for logic model data accessing and custom defined data operations functions management.
type OpsDeployTaskServerDao struct {
	Table   string                     // Table is the underlying table name of the DAO.
	Group   string                     // Group is the database configuration group name of current DAO.
	Columns OpsDeployTaskServerColumns // Columns is the short type for Columns, which contains all the column names of Table for convenient usage.
}

// OpsDeployTaskServerColumns defines and stores column names for table tbl_ops_deploy_task_server.
type OpsDeployTaskServerColumns struct {
	Id         string // 部署任务服务器ID
	TaskId     string // 所属部署任务ID
	ServerId   string // 所属服务器ID
	Progress   string // 进度(-1:部署失败,0:未部署,1:部署中,2:部署完成)
	FailMsg    string // 失败消息
	CreateTime string // 创建时间
	UpdateTime string // 更新时间
}

//  opsDeployTaskServerColumns holds the columns for table tbl_ops_deploy_task_server.
var opsDeployTaskServerColumns = OpsDeployTaskServerColumns{
	Id:         "id",
	TaskId:     "task_id",
	ServerId:   "server_id",
	Progress:   "progress",
	FailMsg:    "fail_msg",
	CreateTime: "create_time",
	UpdateTime: "update_time",
}

// NewOpsDeployTaskServerDao creates and returns a new DAO object for table data access.
func NewOpsDeployTaskServerDao() *OpsDeployTaskServerDao {
	return &OpsDeployTaskServerDao{
		Group:   "default",
		Table:   "tbl_ops_deploy_task_server",
		Columns: opsDeployTaskServerColumns,
	}
}

// DB retrieves and returns the underlying raw database management object of current DAO.
func (dao *OpsDeployTaskServerDao) DB() gdb.DB {
	return g.DB(dao.Group)
}

// Ctx creates and returns the Model for current DAO, It automatically sets the context for current operation.
func (dao *OpsDeployTaskServerDao) Ctx(ctx context.Context) *gdb.Model {
	return dao.DB().Model(dao.Table).Safe().Ctx(ctx)
}

// Transaction wraps the transaction logic using function f.
// It rollbacks the transaction and returns the error from function f if it returns non-nil error.
// It commits the transaction and returns nil if function f returns nil.
//
// Note that, you should not Commit or Rollback the transaction in function f
// as it is automatically handled by this function.
func (dao *OpsDeployTaskServerDao) Transaction(ctx context.Context, f func(ctx context.Context, tx *gdb.TX) error) (err error) {
	return dao.Ctx(ctx).Transaction(ctx, f)
}
